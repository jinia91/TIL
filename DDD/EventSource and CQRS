# 이벤트 소싱이란 

## 일반적인 비지니스 애플리케이션에서 데이터 저장방식(RDB)

- 기존 rdb를 사용한 어플리케이션은 데이터베이스에 최종상태만을 기록
- 최종 상태로 도달할때까지 일련의 과정을 보통 로그로 기록하고 추적하게됨
- 일반적으로 믹스패널, 구글 애널리틱스같은 로그 트레이싱 분석툴을 사용해 비지니스 분석이 가능


## 이벤트 소싱방식

- 일련의 모든 과정을 이벤트로서 저장
- 해당 이벤트들은 오로지 쌓이기만함
- 쌓인 이벤트를 핸들러를 통해 처음부터 끝까지 실행하면 최종 상태가 출력

# 이벤트 영속화

## 이벤트 스토어

- 도메인 객체마다 각자의 이벤트 스트림 다수가 존재

- command -> is valid? - if false) return error else raise event and store
- state = seed + event.....event<sub>n
- 
- command -> command processor -> event handler and event store -> handler handles all event and return state
- 이벤트 저장소는 키 / 밸류타입으로 저장 (id / event type, serialized payload)
## rdb로도 이벤트 스토어 구현가능!!

쇼핑몰, 장바구니, 아이템들 을 가지고 장바구니에 담는 이벤트를 스토어에 저장한다고 가정하면

|쇼핑 카트| 버전 | 이벤트 타입 | 페이로드|
|--|--|--|--|
|아이디  | 1 |쇼핑카트 아이템 추가| 추가될 아이템|

## 문제는 이런 방식일때, 이벤트가 백만개이면, 최종 상태 출력을 위해서는 100만번 이벤트 연산을?

=> rolling snapshot! 스냅샷을 찍어 캐싱하자!
이벤트 100마다 스냅샷을 찍어서 101은 스냅샷 이후로 확인 

이때 스냅샷은 버저닝을 통해 어떤 이벤트핸들러를 통해 상태값이 나오게 되었는지를 관리 추적하는것이 좋음

# CQRS
커맨드와 쿼리를 나누는 정책(cqs)
위의 정책을 보다 큰 단위  oop 혹은 system 단위로 책임을 분리하는 아키텍쳐(cqrs)

단순하게는 화면단을 그리는 queries 객체와 비즈니스 로직을 행하는 service 객체를 분리하는 구조 혹은 애플리케이션 서버 자체를 분리하는 방식이라 이해하면 됨

이때 디비도 따로 분리하고 싱크로나이징을 통해 아키텍쳐 구성

## 이벤트 소싱에서 cqrs

이벤트 소싱은 조회에있어서 이벤트를 모두 연산해야하므로 성능이슈가 분명히 생길수밖에없음

특히 풀테이블 스캔 쿼리같은경우 rdb는 인덱스를 통한 해결방법이 있지만 이벤트 소싱은 모든 이벤트를 연산해 모든 상태값을 구해야하는 엄청난 이슈가 발생

이때 이를 해결하기 위해cqrs를 접목 가능

- command side
	client -> domain layer -> eventstore 
- query side
	client -> real Model Facade -> view material(from eventstore)

=> command side는 이벤트 로그를쌓고

쌓인 이벤트 로그를 실행해 나온 상태를

=> query side쪽에서 쌓아두고 조회로직시 이걸 출력


## eventstore의 event를 전달할때 고려해야할것



>분산 아키텍쳐의 어려움
>정확히 한번 배달, 메세지 순서 보장

1. 멱등성고려하기
	quantity increased (x) vs queantity changed (o)
2.  



# 그래서 왜 사용하는거지?

- 버그 추적 용이(로그 분석이라보면되니까)
- msa와 좋은 시너지?
- ddd 객체지향과  좋은 시너지
- 임피던스 불일치가 발생하지 않는다?
	- 도메인이 수정되어서 db에 컬럼을 추가하는 작업이 번거롭고 까다롭다
	- 하지만 이벤트 소싱을 통해 이벤트 핸들을 하게되면 가장 마지막 임피던스가 적용된, 최종 수정본이 출력되므로 도메인 스키마를 변경하는데 큰 비용이 들지 않는다


결국 신뢰할수 있는 시스템 기록확보에 용이하고 db의 제약에서 자유롭다
복잡하고 단순 모델에는 적합하지 않다


기록들을 저장하고 활용해야하는 비지니스에서 생각해볼법한 아키텍쳐이지 않을까 싶음

ddd랑은 왜 궁합이 좋다는거지?
