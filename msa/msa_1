# 모놀리식
## 장점
- 개발이 간단
- 애플리케이션 변경이 쉬움
- 테스트가 쉬움
- 배포가 쉬움
- 확장이 쉬움
## 단점
- 최초엔 개발이 간단할지라도 성공한 앱은 비즈니스에 대한 요구사항 달성을 위해 끊임없이 배대해져가고, 결국 너무 복잡해진 앱은 개발자를 압박함
- 비대해진 앱은 실행속도도 느리고, 코드를 고치고 빌드/실행후 테스트하기까지 너무 많은 시간이 낭비되어 생산성을 떨어뜨리는 요인이 됨
- 최근트랜드는 지속적인 배포(CD`continuos Deployment`)로 기민한 배포를 통해 그만큼 빠른 유저경험 개선을 달성함
  - 2011 아마존은 11.6초마다 한번씩 배포가 일어났고, 2019 국내 aws 컨퍼런스의 발표내용에 따르면 현재 아마존 서비스의 배포주기는 초당 1.5!
  - 하지만 모놀리틱 구조에서는 스프린트를 거쳐 feature 브랜치로 기능개발을 여러팀들이 병럴적으로 이루어냈더라도 코드를 merge하는시점, 사이드이펙트 고려, qa실시등 오버헤드가 발생
- 서버 특징에 따라 확장이 어려움
  - 이미지 처리 모듈과같은 고연산을 요하는 비즈니스 로직을 처리하려면 cpu 코어수가 많은 서버에 배포하는것이 최적일것이며, 대용량 데이터를 빠르게 처리하기위해 인메모리 내부 캐시를 사용하는 특정 모듈은 메모리가 큰 서버에 배포하는것이 최적.
  - 하지만 모놀리식구조에서는 이를 특화시키기어려움
  
